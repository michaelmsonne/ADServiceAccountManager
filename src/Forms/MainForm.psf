<File version="3.2">
  <FileID>2bc9c680-4c10-4126-aed3-3e74911357e3</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAANjzSURBVHhe7P0HkCVJnp8Hwg5G4xnP7kAazMjj
kTjc8XgUwJFcYgmAu+ACSyyxWL07omd6Zlp3l9YiKzOrUmuttc5KWam11lprrbXW8qX8zjxeZlZW
Vk1PdU9PT9Xk/2f22XsvwsPDwyNe+C88XPy9vycSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUTvo3z/g//g71f+wR/8r5WmpmaVFhZWlaZm
FoIgCIIgvDdYVlpa2lRev36t8j/+B/+g8u/9vb+n+Hr9/b//f2r56KOPSc8tpX1ont6JFbrHlgVB
EARBeI/onVilqWccdy9f/sv/8r/gYnn/mv7Xf/EvKlNzSmkeWqS0ZYiS5kFBEARBEN4zipsHqegY
p314ngcPH/9qA6Cq/TtGFihrG6G8dVgQBEEQhPeUstZh7YE+M6f4VxsAS0uryqGZDW2jirYRQRAE
Qfjdon2U6s5xqru+PVWdY1S06+Or6hijqlMt+5Z0jGtp0uLqHHttX9+IznEqT+JSlLeN0DqyRHpW
wa82ABYWlpWDM+taYrSDUpx8r++dob5PT0PfLDVdk9qOzsIJgiAIwjtOdccYuVVdpJe2kVHa/o1J
L2kjr6ZbK2xV4V1Y10NOZTu5Vd8ctV1Bbbc+XZ3j5Nf2avFf3OfboI4np7LzlWOt7BijbXSZtKz8
tzMAqgagskPvJE6p650mOr2YqJRCYtKLCU/MpbC+l4b+Oaq7p14JKwiCIAjvInU9U6QXtxCfWU1q
QeO3pIn4jCqyK7oorOsmo6iW/KpW8ipbziiobqOwpp2CE7Tv1e2vhVO/M0vqyK/pIK+6h7j0StIK
ml7ZX1phE+lFzdqn+q2+Ky6mK62gkYSsGlIKmqjtntSOV9UwtI+tvL0BGJ7dpKpzgpouPY0D8wRE
JODi4oKnkyOetta4Orvg5OZDRWMvbZ2j1HRPnoXX6J7STIP+9yR1fbOaWag/W6antmdaW65Oyivb
/xJU+LqL+3oDdb0zWgZcXP6d0j2l1YbUni2bPNnvG8IKgiAIv3Ua+maIzaihtKFPX0CqWuxvSE3X
OIXV3STmNZFb2UpV6yBNA6p8m9FQ+6jtnqKoYYDiE4oa+ilrGaGxf1YrB0/Dqt+1HaPklDeTXNBC
bkU7tT0TL/fXMaZV5WeVt1Hc0E99zxS5VZ0aqiZDhdFq4rWwo1S0DBKdVnVW1lZ3TdAxvkr6WxuA
uU2quya1AlShGhA8NHgKHFLaM8xtvxiUwp7HYHb9JlZ/+e8oah6iQR2I2qZnmpr2QYrquqntURkx
SmFFPZmFFeTV9GiFpCrElUGobukis6CSgro+anv1hfvpfl9lirqeScrrOyhpGtYMw+th9KhwJXXt
VLTr3d7F9d8elYaT+JRh6RykoKqd6i798rrucYprWihr+673KwiCIHwXqAL3RXYdJfV9lLeOUNYy
fAG17DwX16v2caMU1vSQUtBCfk071W1DWmGuLyOmtTLQwz8Gd69gAoKjCQyJwT8oCjtHX5Lyamka
XNDCnoXvHCWvuo204jbyKjq0tgWlzUMaZa0jeATEEh6ZiLvvc+w8IgkMiSMwOIawF3naw7oKV9J0
Er5pkPjM2hMTMqk9nHdOrL19G4DR+W0tUXqXMk3ryDLGJlZsLc5RPLOJTeeiZgCCol8Q8MVHOP+T
/zvp1Z20Di9q4ZUTKqmoIPpFJuVdszR2d5OYlEludQupGblkV/XSNLRAY9cA6VmF5Fa1UFTbRW3v
PE0Ds9oJUm0MGgfmtO96xzSjratpG9TeuTT269epg9TCnoRr6J+nvrOPhIRE0ss6tNoL/fo5fVjN
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
qrpVateJOuTjQyrSY4jJbGBHp3LtWDuHqkHh2fGrbl/n8/ok/btbav/b+mtE5ePqKnsnXbc21tfQ
qfScdB3b391kdW1da09ydLTL2soqu3sqTjUs8ZZWcGxo14Ca2+GkpfDJsajttWtpZYVdlY4DnbbN
3klLq831VTZ29d0qj3WTBHmH0Dy8wMnAW+xurWlzLGjzQOzvat/VoR/sbrK+uXM2t4S6frU5J1Re
qml819a0yZ5O06OeNNR1uquGdD65Ts//L/Tn9Zi9nXVW1za0BnenPVNUi3cV5/b6Cpu7OnXySPS1
58pXV7DLbdfSubG+qt0cTuebODt+dV0dH7G6usKumhfjZKhurRW9uv62NrWJrrR5K7T8OmRPt8Hq
6qbWgO9lGvTnbW93k5V1/f9qb1s/9LJafrC3w9q6/np/Nd1H2hwHG1v6IZ/VO1z1ebS/x3B9Cg8t
XRnf1J315tCnS99LQ+WZSpOaA2R3Ww0fvafvInvSqlqPfl9aO52T//X+7vbJUNf6/6q+8eIx62ur
bJ/7D2tPrmtr7OhO7mGn/wntOj5/bvT5v7W+wsb2ztlxnHbXPX+8+7ot7d6kL8/2WV9bYWtH/1/f
2dIfg/q/HR3qWFPX5MkQ3+rc72yusXUykdjWxhrb6k/7lr1cfh0DsDZUjoVVkNZYrSwtgufPSxlt
S8XF15fkgkR++n/8iICEPCLCQgiLSiEvwx/HgCj6FjepSwnGwjqYzPgojB4aY2psQVrluHY8rz9d
fz1K38YAKI3WZ+Di97IB5lR3Fc4O3iSmpZMU64prbB4rugPaM8JwdfYhKT6cv/w/fkBu9xwjDfE4
uXvqp0XXtt4lNdiT67dsqOvuIiwght6hLhJDnPBOK6W1roGahi6aS0to7umnMqOCxV9R4/DeGgAt
Iad/tpM/xMvWuvo/6Pkw+ydjouvHV1fr9KOYqT/t+bj1GX2kzbr38o+m1uk/VaM7LcThPlurywwP
D9I/OolOuym9nLDn5c3gfLrPt5JW789Owpzu51wGq+/6T502pvup1B9WfzyvnpDz3xWv3gj02+jX
v/79dBstjnPHrIyBPqWq/NtlcnSY4ZFJzbCoBjAq/RfTcJbf545DW76nY2tn+2RyIR3balx5NVa9
lpaX+z/dXh/vueUn5/csj7Uuga/n92m+aGPe7+5pxubVeM7Hfy7dF/JKi+d8nBfiP5/W0/On3/b0
+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
CMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyA
IAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxC
xAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxCxAAIgiAI
wiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAg
CIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELE
AAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjC
JUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAI
giBcQsQACIIgCMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQA
CIIgCMIlRAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIl
RAyAIAiCIFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiC
IFxCxAAIgiAIwiVEDIAgCIIgXELEAAiCIAjCJUQMgCAIgiBcQsQACIIgCMIlRAyAIAiCIFxCxAAI
giAIwiXkd8IA3Llzh8LCQtLS0gRBEARBeAvy8vL45JNP3l8DEBsby9/8zd/g4+ODk5OTIAiCIAhv
gaenJ3/yJ39Cb2+vVp6+Vwbg6OiIzs5Onjx5wrNnz3j69KkgCIIgCG+BKjdNTU1ZWVnh8PDw/TIA
pwkQiUQikUj07aQK/dMy9r0yAOcTJwiCIAjCt0cMwK+BSpPKQOG75WI+/6Y5OJDz+L7yLt4XhMvL
u1wmvOm/opaLAfgWqPSoNKvME7471Pup7/tcq4t/ZXWV1dU14T1CnbPt7Xfv3iBcTtR1uLa2xvT0
9DuJKl9VgX8+zWIAvgUqLTqdjtraWsrLy6mqqqK6ulr4NVH5WFxczMDAAMfHx6/l+3eNuvg3N7eo
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
H0YAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region From load
$formADServiceAccountMana_Load = {

	#Startup checks
	Write-Log -Level INFO -Message "Startup checks starting..."
	Write-Log -Level INFO -Message "Checking log path..."
	CheckLogPath
	Write-Log -Level INFO -Message "Checking log path: Done"
	Write-Log -Level INFO -Message "Checking for old logs..."
	Claer-OldLogs
	Write-Log -Level INFO -Message "Checking for old logs: Done"
	Write-Log -Level INFO -Message "Startup checks: Done"
	
	#SET DATA FOR INTERNAL BUILD VS PUBLIC
	if ($InternalBuild -eq $true)
	{
		# INTERNAL BUILD SETTINGS
		$formADServiceAccountMana.Text = "$global:ToolName v. $FormVersion - Internal build - Created by: $Author - Company: $AuthorCompany"
		
		# Write to log  internal application is started/loaded
		Write-Log -Level INFO -Message "The application $global:ToolName v. $FormVersion is started - Internal build - Created by: $Author - Company: $AuthorCompany"
	}
	else
	{
		# SET PUBLIC SETTINGS FOR APPLICATION (HIDE ETC.)
		#$formServiceAccountsVXxxC.Text = "Service Accounts v. $FormVersion - Created by: $Author - Company: $AuthorCompany"
		$formADServiceAccountMana.Text = "$global:ToolName v. $FormVersion"
		$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
		
		#Write to log internal application is started/loaded
		#Write-Log -Level INFO -Message "The application Service Accounts v. $FormVersion is started - Created by: $Author - Company: $AuthorCompany"
		Write-Log -Level INFO -Message "The application $global:ToolName v. $FormVersion is started - Created by: $Author"
	}
	
	# CHECK IF POWERSHELL MODULE EXITS AND INSTALL IF/LOAD IF NEEDED
	Write-Log -Level INFO -Message "Checking for PowerShell modules exits for the tool..."
	if (Get-Module -ListAvailable -Name ActiveDirectory)
	{
		Write-Log -Level INFO -Message "Checking for PowerShell modules exits for the tool: Done - Module ActiveDirectory exists"
		
		# TRY TO IMPORT MODULE
		try
		{
			Write-Log -Level INFO -Message "Trying to import PowerShell module: ActiveDirectory..."
			Get-Module -ListAvailable ActiveDirectory | Import-Module | Out-Null
			Write-Log -Level INFO -Message "Trying to import PowerShell module: ActiveDirectory: Done"
		}
		# Catch specific types of exceptions thrown by one of those commands
		catch [System.Exception]
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Failed to import PowerShell module: ActiveDirectory" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
			Write-Log -Level ERROR -Message "Failed to import PowerShell module: ActiveDirectory"
			Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
		}
		# Catch all other exceptions thrown by one of those commands
		catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Failed to import PowerShell module: ActiveDirectory" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
			Write-Log -Level ERROR -Message "Failed to import PowerShell module: ActiveDirectory"
			Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
		}
	}
	else
	{
		Write-Log -Level WARN -Message "Checking for PowerShell modules exits for the tool: Done - Module ActiveDirectory does not exist"
		
		<#
		# GET OS TYPE
		Work Station (1)
		Domain Controller (2)
		Server (3)
		#>
		Write-Log -Level INFO -Message "Getting OperatingSystem ProductType..."
		try
		{
			# TRY TO GET INFORMATION FROM OS
			$osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
			$osInfo.ProductType
			
			$WindowsInstallType
			if ($osInfo.ProductType -eq "1")
			{
				# INSTALL FEATURE WINDOWS CLIENT WINDOWS 10 AND UP
				$WindowsInstallType = "Windows workstation"
				Write-Log -Level INFO -Message "Got OperatingSystem ProductType: Windows workstation"
			}
			if ($osInfo.ProductType -eq "2")
			{
				# INSTALL FEATURE WINDOWS SERVER
				$WindowsInstallType = "Domain Controller"
				Write-Log -Level INFO -Message "Got OperatingSystem ProductType: Domain Controller"
			}
			if ($osInfo.ProductType -eq "3")
			{
				# INSTALL FEATURE WINDOWS SERVER
				$WindowsInstallType = "Member Server"
				Write-Log -Level INFO -Message "Got OperatingSystem ProductType: Member Server"
			}
			
			# ASK IF THE USER WILL INSTALL AD Recycle Bin
			$ConfirmInstallADRecycleBin = Show-MsgBox -Prompt "PowerShell modules does not exist for this tool on this computer: $env:COMPUTERNAME - type: $WindowsInstallType`r`n`r`nWill you install the Active Directory PowerShell module?`r`n`r`nThis will use the current user (make sure you have the right permissions before)" -Title "Install Active Directory PowerShell module?" -Icon Exclamation -BoxType YesNo -DefaultButton 1
			Write-Log -Level INFO -Message "PowerShell modules does not exist for this tool on this computer: $env:COMPUTERNAME - type: $WindowsInstallType - Ask user: Will you install the Active Directory PowerShell module? - This will use the current user (make sure you have the right permissions before)"
			
			# IF YES
			If ($ConfirmInstallADRecycleBin -eq "Yes")
			{
				Try
				{
					if ($osInfo.ProductType -eq "1")
					{
						# INSTALL FEATURE WINDOWS CLIENT WINDOWS 10 AND UP
						Write-Log -Level INFO -Message "User pressed on button to Install Active Directory PowerShell module for $env:COMPUTERNAME ($WindowsInstallType) - confirmed by user"
						Add-WindowsCapability -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 -Online
					}
					elseif ($osInfo.ProductType -eq "2")
					{
						# INSTALL FEATURE DOMAIN CONTROLLER
						Write-Log -Level INFO -Message "User pressed on button to Install Active Directory PowerShell module for $env:COMPUTERNAME ($WindowsInstallType) - confirmed by user"
						Install-WindowsFeature -Name "RSAT-AD-PowerShell" -IncludeAllSubFeature
					}
					elseif ($osInfo.ProductType -eq "3")
					{
						# INSTALL FEATURE WINDOWS SERVER
						Write-Log -Level INFO -Message "User pressed on button to Install Active Directory PowerShell module for $env:COMPUTERNAME ($WindowsInstallType) - confirmed by user"
						Install-WindowsFeature -Name "RSAT-AD-PowerShell" -IncludeAllSubFeature
					}
					else
					{
						# UNKNOWN WINDOWS
						Show-MsgBox -Prompt "Installation for Active Directory PowerShell module on computer $env:COMPUTERNAME canceled - cant get Windows version information, aborting" -Title "Aborting install of Active Directory PowerShell module" -Icon Information -BoxType OKOnly
						Write-Log -Level INFO -Message "Installation for Active Directory PowerShell module on computer $env:COMPUTERNAME canceled - cant get Windows version information, aborting"
					}
					
					# Test if Active Directory module is installed
					Write-Log -Level INFO -Message "Checking of installed Active Directory PowerShell module on $env:COMPUTERNAME - type: $WindowsInstallType..."
					if (Get-Module -ListAvailable -Name ActiveDirectory)
					{
						Write-Log -Level INFO -Message "Successfully installed Active Directory PowerShell module on $env:COMPUTERNAME - type: $WindowsInstallType"
						Show-MsgBox -Prompt "Successfully installed Active Directory PowerShell module on $env:COMPUTERNAME" -Title "Success" -Icon Information -BoxType OKOnly -DefaultButton '1'
					}
					else
					{
						Write-Log -Level WARN -Message "Not successfully installed Active Directory PowerShell module on $env:COMPUTERNAME - type: $WindowsInstallType"
						Show-MsgBox -Prompt "Not successfully installed Active Directory PowerShell module on $env:COMPUTERNAME" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
					}
				}
				Catch
				{
					Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error installing Active Directory PowerShell module on $env:COMPUTERNAME - type: $WindowsInstallType" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
					Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
					
					$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = "Error installing..."
					$toolstripstatuslabelMain_ADRecycleBinStatusText.ForeColor = 'Red'
				}
			}
			# IF NO
			else
			{
				Show-MsgBox -Prompt "Installation for Active Directory PowerShell module on computer $env:COMPUTERNAME - type: $WindowsInstallType canceled by user, aborting`r`n`r`nYou cant use the tool without this so the interface is disabled." -Title "Aborting install of Active Directory PowerShell module" -Icon Information -BoxType OKOnly
				Write-Log -Level INFO -Message "Installation for Active Directory PowerShell module on computer $env:COMPUTERNAME canceled by user, aborting"
			}
		}
		# Catch specific types of exceptions thrown by one of those commands
		catch [System.Exception]
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
			Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
		}
		# Catch all other exceptions thrown by one of those commands
		catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
			Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
		}
	}
	
	# Test if connected Active Directory
	Write-Log -Level INFO -Message "Checkinging if connected to an Active Directory..."
	If (Test-DomainConnection)
	{
		# If Active Directory is connected show in statusbar		
		Write-Log -Level INFO -Message "Checking if connected to an Active Directory: Done"
		Write-Log -Level INFO -Message "Active Directory Status: Connected - Domain: $env:USERDNSDOMAIN"
		
		#Update GUI
		$toolstripstatuslabelMain_ActiveDirectoryStatusText.Text = "Enabled"
		$toolstripstatuslabelMain_ActiveDirectoryStatusText.ForeColor = 'Green'
		$toolstripstatuslabelMain_ActiveDirectoryStatusDomainText.Text = "($env:USERDNSDOMAIN)"
		
		# Test if Active Directory Recycle Bin is enabled or not
		Write-Log -Level INFO -Message "Checking if Active Directory Recycle Bin is enabled or not..."
		If (Test-ADRecycleBin)
		{
			# If Active Directory Recycle Bin is enabled show in statusbar
			$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = "Enabled"
			$toolstripstatuslabelMain_ADRecycleBinStatusText.ForeColor = 'Green'
			Write-Log -Level INFO -Message "Active Directory Recycle Bin Status: Enabled"
		}
		else
		{
			# If Active Directory Recycle Bin is NOT enabled
			Write-Log -Level INFO -Message "Active Directory Recycle Bin Status: Disabled"
			$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = "Disabled"
			$toolstripstatuslabelMain_ADRecycleBinStatusText.ForeColor = 'Red'
			Write-Log -Level INFO -Message "Checking Forest level for Active Directory Recyclebin..."
			if (Test-GetForestModeForADRecycleBin)
			{
				#Active Directory Recycle Bin can be enabled on your domain level
				Show-MsgBox -Title "Active Directory Recycle Bin Status" -Prompt "Active Directory Recycle Bin Status: Disabled`r`n`r`nBe careful when delete objects like gMSA accounts and SSA´s if you need to restore!`r`n`r`nYou can enable it in your forest level." -Icon Exclamation -BoxType OKOnly
				Write-Log -Level WARN -Message "Active Directory Recycle Bin Status: Disabled - You can enable it in your forest level."
			}
			else
			{
				#Active Directory Recycle Bin can´t be enabled on your domain level
				Show-MsgBox -Title "Active Directory Recycle Bin Status" -Prompt "Active Directory Recycle Bin Status: Disabled`r`n`r`nBe careful when delete objects like gMSA accounts and SSA´s if you need to restore!`r`n`r`nYou can´t enable it in your forest level!" -Icon Critical -BoxType OKOnly
				Write-Log -Level WARN -Message "Active Directory Recycle Bin Status: Disabled - You can´t enable it in your forest level!"
			}
		}
		
		#Show Forest level in statusbar
		Write-Log -Level INFO -Message "Showing Forest level for Active Directory in statusbar"
		$toolstripstatuslabelMain_ForestlevelStatusText.Text = (Get-ADForest).ForestMode
		
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		Write-Log -Level INFO -Message "Loading list of Group Managed Service Accounts that currenty exists"
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
		
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		# LOOK FOR OU FOR SSA ACCOUNTS
		Write-Log -Level INFO -Message "Finding OU for Standard Service Accounts..."
				
		<#If (Find-ServiceAccountOU -ne $null)
		{
			$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		}
		Else
		{
			Show-MsgBox -Prompt "Can't locate the service account OU automaticly be name a standard aka: Privileged Account*, Service* or *Service*Account*`r`n`r`nPlease select your OU for Service Accounts." -Title "Can't locate the service account OU automaticly" -Icon Exclamation -BoxType OKOnly
			Write-Log -Level INFO -Message "Can't locate the service account OU automaticly be name a standard aka: Privileged Account*, Service* or *Service*Account*"
		}#>
		
		<#
		if (Find-ServiceAccountOU = "")
		{
			Show-MsgBox -Prompt "Can't locate the service account OU automaticly be name a standard aka: Privileged Account*, Service* or *Service*Account*`r`n`r`nPlease select your OU for Service Accounts." -Title "Can't locate the service account OU automaticly" -Icon Exclamation -BoxType OKOnly
			Write-Log -Level INFO -Message "Can't locate the service account OU automaticly be name a standard aka: Privileged Account*, Service* or *Service*Account*"
		}
		else
		{
			$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		}#>
		
		Write-Log -Level INFO -Message "Finding OU for Standard Service Accounts: Done"
		
		#Get-SSAToDGV
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		#Show-SSAInfo
	}
	else
	{
		Write-Log -Level INFO -Message "Active Directory Status: Disconnected"
		
		# If Active Directory is disconnected - remove data in statusstrip
		$toolstripstatuslabelMain_ActiveDirectoryStatusText.Text = "No"
		$toolstripstatuslabelMain_ActiveDirectoryStatusText.ForeColor = 'Red'
		$toolstripstatuslabelMain_ActiveDirectoryStatusDomainText.Text = ""
		$toolstripstatuslabelMain_ADRecycleBinStatus.Text = ""
		$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = ""
		$toolstripstatuslabelMain_ForestlevelStatus.Text = ""
		$toolstripstatuslabelMain_ForestlevelStatusText.Text = ""
		
		#Disable GUI
		Write-Log -Level INFO -Message "Disabled tabpage ServiceAccounts_GMSA, ServiceAccounts_Standard and ServiceAccounts_Information in tool - Active Directory Status is: Disconnected"
		$tabpage_ServiceAccounts_GMSA.Enabled = $false
		$tabpage_ServiceAccounts_Standard.Enabled = $false
		$tabpage_ServiceAccounts_Information.Enabled = $false
		
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST (TO ERROR TEXT IF NEEDED)
		Get-GMSAToDGV
	}
}
#endregion

#region From Close
$formADServiceAccountMana_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
	
	#WRITE TO LOG APPLICATION IS CLOSED
	Write-Log -Level INFO -Message "The application $global:ToolName v. $FormVersion is stopped - Created by: $Author"
}
#endregion

#region Core Functions

function Remove-GMSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedGMSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedGMSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_GMSA_Properties.Text = "Properties:"
	$contextmenustrip_GMSA_Remove.Text = "Remove"
	$contextmenustrip_GMSA_Remove.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesTextboxes = @()
	$AllGMSAPropertiesTextboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesCheckboxes = @()
	$AllGMSAPropertiesCheckboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesTextbox in $AllGMSAPropertiesTextboxes)
	{
		$EachGMSAPropertiesTextbox.tag = ""
		$EachGMSAPropertiesTextbox.text = ""
		$EachGMSAPropertiesTextbox.Forecolor = 'Black'
		$EachGMSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesCheckbox in $AllGMSAPropertiesCheckboxes)
	{
		$EachGMSAPropertiesCheckbox.tag = $false
		$EachGMSAPropertiesCheckbox.checked = $false
		$EachGMSAPropertiesCheckbox.Forecolor = 'Black'
		$EachGMSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE GMSA PROPERTIES GROUPBOX
	$combobox_GMSA_FunctionalOwner.Tag = ""
	$combobox_GMSA_FunctionalOwner.Text = ""
	$combobox_GMSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_GMSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SPN TEXTBOX
	$textbox_GMSA_SPNAdd.Text = ""
	
	# CLEAR THE GMSA INORMATION DATAGRIDVIEWS
	$dgv_GMSA_SPN.DataSource = $null
	$dgv_GMSA_EditMemberOf.DataSource = $null
	$dgv_GMSA_EditAssignedComputers.DataSource = $null
}

function Remove-SSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedSSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedSSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_SSA_Properties.Text = "Properties:"
	$contextmenustrip_SSA_Remove.Text = "Remove"
	$contextmenustrip_SSA_Remove.Enabled = $false
	$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA"
	$contextmenustrip_SSA_CreateGMSA.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesTextboxes = @()
	$AllSSAPropertiesTextboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesCheckboxes = @()
	$AllSSAPropertiesCheckboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesTextbox in $AllSSAPropertiesTextboxes)
	{
		$EachSSAPropertiesTextbox.tag = ""
		$EachSSAPropertiesTextbox.text = ""
		$EachSSAPropertiesTextbox.Forecolor = 'Black'
		$EachSSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesCheckbox in $AllSSAPropertiesCheckboxes)
	{
		$EachSSAPropertiesCheckbox.tag = $false
		$EachSSAPropertiesCheckbox.checked = $false
		$EachSSAPropertiesCheckbox.Forecolor = 'Black'
		$EachSSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE SSA PROPERTIES GROUPBOX
	$combobox_SSA_FunctionalOwner.Tag = ""
	$combobox_SSA_FunctionalOwner.Text = ""
	$combobox_SSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_SSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SSA INORMATION DATAGRIDVIEWS
	$dgv_SSA_EditMemberOf.DataSource = $null
}

function Show-GMSAInfo
{
<#
	.SYNOPSIS
		Show information on selected gMSA in GUI.
	
	.DESCRIPTION
		Show information on the selected gMSA in GUI and update the information to the user.
	
	.NOTES
		Additional information about the function.
#>
	Remove-GMSAInfoControlValue -Confirm:$false
	
	Try
	{
		If ($dgv_GMSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedGMSA = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedGMSAAllProperties = Get-ADServiceAccount -Properties * -Filter { name -eq $SelectedGMSA }
			
			# LABEL THE GMSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_GMSA_Properties.Text = "Properties for gMSA (Group Managed Service Account): $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Text = "Remove gMSA: '$SelectedGMSA'"
			$contextmenustrip_GMSA_Remove.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties))
			{
				# NAME
				If ($SelectedGMSAAllProperties.Name)
				{
					$textbox_GMSA_Name.Tag = $SelectedGMSAAllProperties.Name
					$textbox_GMSA_Name.Text = $SelectedGMSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedGMSAAllProperties.SamAccountName)
				{
					$textbox_GMSA_SamAccountName.Tag = $SelectedGMSAAllProperties.SamAccountName
					$textbox_GMSA_SamAccountName.Text = $SelectedGMSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Description))
				{
					$textbox_GMSA_Description.Tag = $SelectedGMSAAllProperties.Description
					$textbox_GMSA_Description.Text = $SelectedGMSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Department))
				{
					$combobox_GMSA_FunctionalOwner.Tag = $SelectedGMSAAllProperties.Department
					$combobox_GMSA_FunctionalOwner.Text = $SelectedGMSAAllProperties.Department
				}
				
				# DNS HOST NAME
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.DNSHostName))
				{
					$textbox_GMSA_DNSName.Tag = $SelectedGMSAAllProperties.DNSHostName
					$textbox_GMSA_DNSName.Text = $SelectedGMSAAllProperties.DNSHostName
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedGMSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_GMSA_DES.Tag = $true
						$checkbox_GMSA_DES.Checked = $true
					}
					else
					{
						$checkbox_GMSA_DES.Tag = $false
						$checkbox_GMSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_GMSA_RC4.Tag = $true
						$checkbox_GMSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_GMSA_RC4.Tag = $false
						$checkbox_GMSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_GMSA_AES128.Tag = $true
						$checkbox_GMSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES128.Tag = $false
						$checkbox_GMSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_GMSA_AES256.Tag = $true
						$checkbox_GMSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES256.Tag = $false
						$checkbox_GMSA_AES256.Checked = $false
					}
				}
				# DISABLED / ENABLED
				If ($SelectedGMSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_GMSA_EnabledNo.Tag = $false
					$radiobutton_GMSA_EnabledNo.Checked = $false
					$radiobutton_GMSA_EnabledYes.Tag = $true
					$radiobutton_GMSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_GMSA_EnabledNo.Tag = $true
					$radiobutton_GMSA_EnabledNo.Checked = $true
					$radiobutton_GMSA_EnabledYes.Tag = $false
					$radiobutton_GMSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedGMSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_GMSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditMemberOf.Width)
						{
							$dgv_GMSA_EditMemberOf.Columns[$dgv_GMSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditMemberOf.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: ASSIGNED COMPUTERS			
				Try
				{
					# CHECK IF THE ACCOUNT HAS ANY ASSIGNED PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
					$ValuesPrincipals = $($SelectedGMSAAllProperties.PrincipalsAllowedToRetrieveManagedPassword) | Get-ADObject | Select-Object @{ n = 'Principals Allowed To Retrieve Managed Password'; e = { $_.Name } },
																																				@{ n = 'Object Class'; e = { $_.ObjectClass } }
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesPrincipals))
					{
						$ValuesPrincipals_DT = ConvertTo-DataTable -InputObject $ValuesPrincipals
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditAssignedComputers -Item $ValuesPrincipals_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditAssignedComputers.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditAssignedComputers.Width)
						{
							$dgv_GMSA_EditAssignedComputers.Columns[$dgv_GMSA_EditAssignedComputers.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditAssignedComputers.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: SERVICE PRINCIPAL NAMES	
				Try
				{
					# CHECK IF ANY SPNS HAVE BEEN ASSIGNED
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.ServicePrincipalNames))
					{
						$ValuesSPN = $null
					}
					else
					{
						$ValuesSPN = $SelectedGMSAAllProperties.ServicePrincipalNames | Select-Object @{ n = 'Service Principal Names (SPN)'; e = { $_.ToString() } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If ($null -ne $ValuesSPN)
					{
						$ValuesSPN_DT = ConvertTo-DataTable -InputObject $ValuesSPN
						$dgv_GMSA_SPN.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_SPN -Item $ValuesSPN_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_SPN.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_SPN.Width)
						{
							$dgv_GMSA_SPN.Columns[$dgv_GMSA_SPN.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_SPN.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_SPN.DataSource = $null
				}
			}
			else
			{
				Remove-GMSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-GMSAInfoControlValue -Confirm:$false
	}
}

function Show-SSAInfo
{
	<#
	.SYNOPSIS
		Show information on selected SSA in GUI.
	
	.DESCRIPTION
		Show information on the selected SSA in GUI and update the information to the user.
	
	.NOTES
		Additional information about the function.
#>
	Remove-SSAInfoControlValue -Confirm:$false
	
	Try
	{
		If ($dgv_SSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedSSA = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedSSAAllProperties = Get-ADUser -Properties * -Filter { name -eq $SelectedSSA }
			
			# LABEL THE SSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_SSA_Properties.Text = "Properties for Service Account: $SelectedSSA"
			$contextmenustrip_SSA_Remove.Text = "Remove SSA: '$SelectedSSA'"
			$contextmenustrip_SSA_Remove.Enabled = $true
			$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA from $SelectedSSA"
			$contextmenustrip_SSA_CreateGMSA.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties))
			{
				# NAME
				If ($SelectedSSAAllProperties.Name)
				{
					$textbox_SSA_Name.Tag = $SelectedSSAAllProperties.Name
					$textbox_SSA_Name.Text = $SelectedSSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedSSAAllProperties.SamAccountName)
				{
					$textbox_SSA_SamAccountName.Tag = $SelectedSSAAllProperties.SamAccountName
					$textbox_SSA_SamAccountName.Text = $SelectedSSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Description))
				{
					$textbox_SSA_Description.Tag = $SelectedSSAAllProperties.Description
					$textbox_SSA_Description.Text = $SelectedSSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Department))
				{
					$combobox_SSA_FunctionalOwner.Tag = $SelectedSSAAllProperties.Department
					$combobox_SSA_FunctionalOwner.Text = $SelectedSSAAllProperties.Department
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedSSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_SSA_DES.Tag = $true
						$checkbox_SSA_DES.Checked = $true
					}
					else
					{
						$checkbox_SSA_DES.Tag = $false
						$checkbox_SSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_SSA_RC4.Tag = $true
						$checkbox_SSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_SSA_RC4.Tag = $false
						$checkbox_SSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_SSA_AES128.Tag = $true
						$checkbox_SSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES128.Tag = $false
						$checkbox_SSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_SSA_AES256.Tag = $true
						$checkbox_SSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES256.Tag = $false
						$checkbox_SSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedSSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_SSA_EnabledNo.Tag = $false
					$radiobutton_SSA_EnabledNo.Checked = $false
					$radiobutton_SSA_EnabledYes.Tag = $true
					$radiobutton_SSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_SSA_EnabledNo.Tag = $true
					$radiobutton_SSA_EnabledNo.Checked = $true
					$radiobutton_SSA_EnabledYes.Tag = $false
					$radiobutton_SSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedSSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							 @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
					}
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_SSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_SSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_SSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_EditMemberOf.Width)
						{
							$dgv_SSA_EditMemberOf.Columns[$dgv_SSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_SSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_SSA_EditMemberOf.DataSource = $null
				}
			}
			else
			{
				Remove-SSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-SSAInfoControlValue -Confirm:$false
	}
}

function Get-GMSAToDGV
{
<#
	.SYNOPSIS
		Get information on gMSAs to GUI.
	
	.DESCRIPTION
		Show information on all gMSA found in GUI/OU and update the information to the user.
	
	.NOTES
		Additional information about the function.
#>
	Try
	{
		# GET AD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description", "msDS-ManagedPasswordInterval"
		$ValuesServiceAccountList = Get-ADServiceAccount -filter * -Properties $ADServiceAccountProperties | Select-Object Name,
																														   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																														   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																														   @{ n = 'Functional Owner'; e = { $_.Department } },
																														   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																														   @{ n = 'Description'; e = { $_.Description } },
																														   @{ n = 'Password Interval (In days)'; e = { $_.'msDS-ManagedPasswordInterval' } },
																														   @{ n = 'Created'; e = { $_.Created.ToString("dd/MM/yyyy HH:mm:ss") } },
																														   @{ n = 'Modified'; e = { $_.Modified.ToString("dd/MM/yyyy HH:mm:ss") } } | Sort-Object Name
		# SAVE THE UNIQUE 'DEPARTMENT' PROPERTIES, TO BE USED TO UPDATE COMBOBOXES
		$script:AvailableFunctionalOwners = $($ValuesServiceAccountList | Where-Object { $_.'Functional Owner' }).'Functional Owner' | Sort-Object -Unique
		
		# UPDATE THE COMBOBOX WITH THE UNIQUE FUNCTIONAL OWNERS
		If ($AvailableFunctionalOwners)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
			Update-ComboBox -ComboBox $combobox_SSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
		}
		
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FilterBy -Items $($ValuesServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_GMSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesServiceAccountList
			$dgv_GMSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found in Active Directory."
			}
			
			Write-Log -Level INFO -Message "No Group Managed Service Accounts were found in Active Directory."
			
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_GMSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_Select.Width)
		#{
		#	$dgv_GMSA_Select.Columns[$dgv_GMSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_GMSA_Select
	}
	Catch
	{
		if ($toolstripstatuslabelMain_ActiveDirectoryStatusText.Text -eq "No")
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found in Active Directory - Not connected to an Active Directory."
			}
			Write-Log -Level INFO -Message "No Group Managed Service Accounts were found in Active Directory - Not connected to an Active Directory."
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found in Active Directory."
			}
			Write-Log -Level INFO -Message "No Group Managed Service Accounts were found in Active Directory."
		}
		
		$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
	}
}

function Get-SSAToDGV
{
	<#
	.SYNOPSIS
		Get information on SSAs to GUI.
	
	.DESCRIPTION
		Show information on all SSAs found in GUI/OU and update the information to the user.
	
	.NOTES
		Additional information about the function.
	#>
	Try
	{
		$SearchBase = $textbox_SSA_AccountSelectOU.text
		
		# GET AD STANDARD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADStandardServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesStandardServiceAccountList = Get-ADUser -filter * -Properties $ADStandardServiceAccountProperties -SearchBase $SearchBase -SearchScope OneLevel | Select-Object Name,
																																											   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																																											   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																																											   @{ n = 'Functional Owner'; e = { $_.Department } },
																																											   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																																											   @{ n = 'Description'; e = { $_.Description } },
																																											   @{ n = 'Created'; e = { $_.Created.ToString("dd/MM/yyyy HH:mm:ss") } },
																																											   @{ n = 'Modified'; e = { $_.Modified.ToString("dd/MM/yyyy HH:mm:ss") } } | Sort-Object Name
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesStandardServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_SSA_FilterBy -Items $($ValuesStandardServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_SSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesStandardServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesStandardServiceAccountList
			$dgv_SSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Standard Service Accounts were found in Active Directory."
			}
			
			Write-Log -Level INFO -Message "No Standard Service Accounts were found in Active Directory."
			
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_SSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_Select.Width)
		#{
		#	$dgv_SSA_Select.Columns[$dgv_SSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_SSA_Select
	}
	Catch
	{
		if ($toolstripstatuslabelMain_ActiveDirectoryStatusText.Text -eq "No")
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Standard Service Accounts were found in Active Directory - Not connected to an Active Directory."
			}
			Write-Log -Level INFO -Message "No Standard Service Accounts were found in Active Directory - Not connected to an Active Directory."
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Standard Service Accounts were found in Active Directory."
			}
			Write-Log -Level INFO -Message "No Standard Service Accounts were found in Active Directory."
		}
		$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
	}
}

function Search-DataGridView
{
<#	
	.SYNOPSIS
		The view for data in GUI to user.
	
	.DESCRIPTION
		The view for data in GUI to user to filer in.
	
	.PARAMETER DataGridview
		The data view.
	
	.PARAMETER DataGridViewFilterBy
		The filter values to show data for the the user in the GUI.
		Etc. Created, Enabled, Name and AES256 Only.
	
	.PARAMETER DataGridviewFilter
		The filter to show data for the the user in the GUI.
	
	.EXAMPLE
		PS C:\> Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	
	.NOTES
		Additional information about the function.
#>
	param
	(
		[Parameter(Mandatory = $true)]
		$DataGridview,
		[Parameter(Mandatory = $true)]
		$DataGridViewFilterBy,
		[Parameter(Mandatory = $true)]
		$DataGridviewFilter
	)
	
	$bs = New-Object System.Windows.Forms.BindingSource
	$bs.DataSource = $DataGridview.DataSource
	$filter = @()
	
	If (($null -eq $DataGridViewFilterBy) -or ($DataGridViewFilterBy -eq "Search all..."))
	{
		foreach ($column in $DataGridview.Columns)
		{
			$filter += "[" + $column.Name + "]" + " like '%" + $DataGridviewFilter + "%'"
		}
	}
	elseif ($DataGridviewFilter -eq "")
	{
	}
	elseif ($null -ne $DataGridviewFilter)
	{
		$filter += "[" + $DataGridViewFilterBy.ToString() + "]" + " like '%" + $DataGridviewFilter + "%'"
	}
	
	$bs.Filter = ($filter -join " OR ")
	$DataGridview.DataSource = $bs
	
	# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
	If ($DataGridview.Columns.GetColumnsWidth('Displayed') -lt $DataGridview.Width)
	{
		$DataGridview.Columns[$DataGridview.ColumnCount - 1].AutoSizeMode = 'Fill'
	}
}

function Show-NewServiceAccountForm
{
<#
	.SYNOPSIS
		Open the form to create a new Service Account.
	
	.DESCRIPTION
		Open the form to create a new Service Account with data like type and if convert a SSA to an gMSA.
	
	.PARAMETER StandardServiceAccount
		If will create a SSA (Standard Service Account - Active Directory user).
	
	.PARAMETER GroupManagedServiceAccount
		If will create a gMSA (Group Managed Service Account).
	
	.PARAMETER FromStandardServiceAccount
		If will create a gMSA (Group Managed Service Account) from a SSA (Standard Service Account - Active Directory user).
	
	.EXAMPLE
		PS C:\> Show-NewServiceAccountForm -GroupManagedServiceAccount
		PS C:\> Show-NewServiceAccountForm -StandardServiceAccount
		PS C:\> Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
	
	.NOTES
		Additional information about the function.
#>
	param
	(
		[switch]$StandardServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$GroupManagedServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$FromStandardServiceAccount
	)
	
	try
	{
		If ($GroupManagedServiceAccount)
		{
			If ($FromStandardServiceAccount)
			{
				#If creating a gMSA from a SSA
				$tabcontrol_ServiceAccounts.SelectedTab = $tabpage_ServiceAccounts_GMSA
				#Get groups
				[array]$Groups = $($SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'DistinguishedName'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } }).DistinguishedName
				#Set new from data
				Show-NewGMSAWizard_psf -Name $($textbox_SSA_Name.Text) -Description $($textbox_SSA_Description.Text) -MemberOf $Groups
				Write-Log -Level INFO -Message "Form to create a new gMSA from SSA [$($textbox_SSA_Name.Text)] is opened"
			}
			else
			{
				#If creating a gMSA
				Write-Log -Level INFO -Message "Form to create a new gMSA is opened by the user"
				Show-NewGMSAWizard_psf
			}
			
			# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
			If (-not [string]::IsNullOrEmpty($NewServiceAccountCreated))
			{
				Write-Log -Level INFO -Message "User has added a new gMSA: [$NewServiceAccountCreated] in Active Directory"
				
				# RELOAD THE GMSA ACCOUNT LIST
				Get-GMSAToDGV
				
				# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
				$dgv_GMSA_Select.Rows |
				ForEach-Object{
					If ($_.Cells['Name'].Value -eq $($NewServiceAccountCreated.Name))
					{
						$_.Selected = $true
					}
				}
				
				# SCROLL TO THE SELECTED ROW
				$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
				
				# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
				Remove-Variable -Name NewServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
				
				# SHOW THE PROPERTIES OF THE NEW ACCOUNT
				Show-GMSAInfo
				
				Write-Log -Level INFO -Message "Reloaded gMSA data to show the new gMSA in the list"
			}
		}
		elseif ($StandardServiceAccount)
		{
			# OPEN THE NEW GROUP MANAGED SERVICE ACCOUNT WIZARD TO CREATE ACCOUNT IN THE CURRENT OU
			Show-NewSSAWizard_psf -OU $textbox_SSA_AccountSelectOU.Text
			
			Write-Log -Level INFO -Message "Form to create a new SSA in OU [$($textbox_SSA_AccountSelectOU.Text)] is opened by the user"
			
			# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
			If (-not [string]::IsNullOrEmpty($NewStandardServiceAccountCreated))
			{
				Write-Log -Level INFO -Message "User has added a new SSA [$NewStandardServiceAccountCreated] in OU [$($textbox_SSA_AccountSelectOU.Text)] in Active Directory"
				
				# RELOAD THE SSA ACCOUNT LIST
				Get-SSAToDGV
				
				# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
				$dgv_SSA_Select.Rows |
				ForEach-Object{
					If ($_.Cells['Name'].Value -eq $($NewStandardServiceAccountCreated.Name))
					{
						$_.Selected = $true
					}
				}
				
				# SCROLL TO THE SELECTED ROW
				$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
				
				# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
				Remove-Variable -Name NewStandardServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
				
				# SHOW THE PROPERTIES OF THE NEW ACCOUNT
				Show-SSAInfo
				
				Write-Log -Level INFO -Message "Reloaded SSA data to show the new SSA in the list"
			}
		}
	}
	catch
	{
		#If error, log it
		Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
	}
}

#endregion

#region Group Managed Service Account Tab

$button_GMSA_Refresh_Click = {
	
	Write-Log -Level INFO -Message "User pressed button for refresh gMSA information"
	
	#Set default filter and reload data
	$combobox_GMSA_FilterBy.Text = "Name"
	$textbox_GMSA_Filter.Text = ""
	
	#Update info in GUI
	Get-GMSAToDGV
	
	# LOAD A LIST OF THE MAMAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Show-GMSAInfo
}

$button_GMSA_CreateNew_Click = {
	
	Write-Log -Level INFO -Message "User opened form Create a gMSA"
	
	#Open from to create gMSA
	Show-NewServiceAccountForm -GroupManagedServiceAccount
}

$dgv_GMSA_Select_Click = {
	
	# SELECT THE GMSA AND SHOW THE PROPERTIES
	Show-GMSAInfo
}

$dgv_GMSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_GMSA_Description.Text -ne $textbox_GMSA_Description.Tag)
	{
		$textbox_GMSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_Description.ForeColor = 'Black'
	}
}

$textbox_GMSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-GMSAPropertyChange
}

$combobox_GMSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_GMSA_FunctionalOwner.Text -ne $combobox_GMSA_FunctionalOwner.Tag)
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Black'
	}
}

$combobox_GMSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-GMSAPropertyChange
}

$textbox_GMSA_DNSName_TextChanged = {
	
	# DNS HOSTNAME TEXT CHANGED
	If ($textbox_GMSA_DNSName.Text -ne $textbox_GMSA_DNSName.Tag)
	{
		$textbox_GMSA_DNSName.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_DNSName.ForeColor = 'Black'
	}
}

$textbox_GMSA_DNSName_ForeColorChanged = {
	
	# DNS HOSTNAME FORECOLOR CHANGED
	Test-GMSAPropertyChange
}

$checkbox_GMSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_DES.Checked -ne $checkbox_GMSA_DES.Tag)
	{
		$checkbox_GMSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_DES.ForeColor = 'Black'
	}
}

$checkbox_GMSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_RC4.Checked -ne $checkbox_GMSA_RC4.Tag)
	{
		$checkbox_GMSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_RC4.ForeColor = 'Black'
	}
}

$checkbox_GMSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
}

$checkbox_GMSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES128.Checked -ne $checkbox_GMSA_AES128.Tag)
	{
		$checkbox_GMSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES128.ForeColor = 'Black'
	}
}

$checkbox_GMSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
}

$checkbox_GMSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES256.Checked -ne $checkbox_GMSA_AES256.Tag)
	{
		$checkbox_GMSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES256.ForeColor = 'Black'
	}
}

$checkbox_GMSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
}

$radiobutton_GMSA_EnabledNo_CheckedChanged = {
	
	#Get selected gMSA in grid
	If ($radiobutton_GMSA_EnabledNo.Checked -ne $radiobutton_GMSA_EnabledNo.Tag)
	{
		#If selected gMSA in grid can be enabled
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		#If selected gMSA in grid cant be enabled
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_GMSA_EnabledNo_ForeColorChanged = {
	
	Test-GMSAPropertyChange
}

$button_GMSA_Apply_Click = {
	
	Write-Log -Level INFO -Message "User pressed on button for apply changes to gMSA [$SelectedGMSA]"
	
	If (($checkbox_GMSA_DES.Checked -eq $false) -and ($checkbox_GMSA_RC4.Checked -eq $false) -and ($checkbox_GMSA_AES128.Checked -eq $false) -and ($checkbox_GMSA_AES256.Checked -eq $false))
	{
		#If user not have selected/unselected all encryption types when modifying gMSA
		Show-MsgBox -Prompt "No Encryption Types were selected. Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
		Write-Log -Level INFO -Message "No Encryption Types were selected. Please select atleast one encryption type for gMSA [$SelectedGMSA] and try again. No changes id made"
	}
	else
	{
		# ASK IF THE USER WAIL APPLY THE CHANGE - LAST CHANCE
		$ConfirmChangeForGMSA = Show-MsgBox -Prompt "Sure you want to change the settings?`r`n`r`nChanges will apply for gMSA [$SelectedGMSA]." -Title "Changes will apply for gMSA $SelectedGMSA - sure?" -Icon Question -BoxType YesNo -DefaultButton 1
		
		If ($ConfirmChangeForGMSA -eq "Yes")
		{
			Try
			{
				# MODIFY THE GMSA PROPERTIES
				Modify-GMSA -gMSA $SelectedGMSA
				Write-Log -Level INFO -Message "User pressed on button and saved changes to gMSA [$SelectedGMSA] - confirmed by user"
				Show-MsgBox -Prompt "Successfully set changes to gMSA [$SelectedGMSA]" -Title "Success" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Catch
			{
				#If any error, show data to the user
				Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
				Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
			}
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled for gMSA [$SelectedGMSA]" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			Write-Log -Level INFO -Message "Operation canceled for gMSA [$SelectedGMSA] - canceled by user, Aborting Change for Apply changes to gMSA [$SelectedGMSA]"
			return
		}
		
		# LOAD A LIST OF THE MAMAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_GMSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedGMSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
		
		#Update info in GUI
		Show-GMSAInfo
	}
}

$textbox_GMSA_SPNAdd_TextChanged = {
	
	# ADD SPN TEXT CHANGED
	If ([string]::IsNullOrWhiteSpace($textbox_GMSA_SPNAdd.Text))
	{
		$button_GMSA_SPNAdd.Enabled = $false
	}
	else
	{
		$button_GMSA_SPNAdd.Enabled = $true
	}
}

$button_GMSA_SPNAdd_Click = {
	
	# ADD SPN	
	Write-Log -Level INFO -Message "User opened form Add Service Principal Names (SPNs) to gMSA [$SelectedGMSA]"
	
	If ($(Add-SPNtoGMSA -ServicePrincipalName $textbox_GMSA_SPNAdd.Text -gMSA $textbox_GMSA_SamAccountName.Text) -eq $true)
	{
		$textbox_GMSA_SPNAdd.Text = ""
	}
	
	#Update info in GUI
	Show-GMSAInfo
	
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

$button_GMSA_SPNRemove_Click = {
	
	# REMOVE SPN	
	Write-Log -Level INFO -Message "User opened form Remove Service Principal Names (SPNs) from gMSA [$SelectedGMSA]"
	
	Remove-SPNfromGMSA -ServicePrincipalName $($dgv_GMSA_SPN.SelectedRows | ForEach-Object { $_.Cells['Service Principal Names (SPN)'].value }) -gMSA $textbox_GMSA_SamAccountName.Text -Confirm:$false
	
	#Update info in GUI
	Show-GMSAInfo
	
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

$button_GMSA_AddAssignedComputer_Click = {
	
	# OPEN GROUP PICKER AND ASSIGN THE GMSA TO THE SELECTED GROUP OR COMPUTER
	# AS PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
	
	Write-Log -Level INFO -Message "User opened form Add Assigned Computers for gMSA [$SelectedGMSA]"
	
	If (Show-GroupPickerForm_psf)
	{
		If ($SelectedADObject)
		{
			Try
			{
				# MODIFY THE GMSA
				Add-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToAdd $SelectedADObject
			}
			Catch
			{
				#If error, show data to the user and retun
				Show-MsgBox -Prompt "Operation failed for added Principals Allowed To Retrieve Password to gMSA [$SelectedGMSA] - see log for more information" -Title "Error" -Icon Exclamation -BoxType OKOnly
				Write-Log -Level INFO -Message "Operation canceled for gMSA [$SelectedGMSA] - canceled by user, Aborting Change for Apply changes to gMSA [$SelectedGMSA]"
				Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
			}
		}
	}
	else
	{
		# IF NOTHING SELECTED
		Write-Log -Level INFO -Message "Operation canceled for gMSA [$SelectedGMSA] - no Principals Allowed To Retrieve Password selected by user"
	}
	
	# CLEANUP DATA
	Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	#RELOAD DATA
	Show-GMSAInfo
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

$button_GMSA_RemoveAssignedComputer_Click = {
	
	Write-Log -Level INFO -Message "User opened form Remove Assigned Computers for gMSA [$SelectedGMSA]"
	
	#Remove Principals Allowed To Retrieve Managed Password
	Remove-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToRemove $($dgv_GMSA_EditAssignedComputers.SelectedRows | ForEach-Object {
			$_.Cells['Principals Allowed To Retrieve Managed Password'].value
		}) -Confirm:$false
	
	# RELOAD GMSA DATA
	Show-GMSAInfo
	
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

$button_GMSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE GMSA TO THE GROUP SELECTED	
	Write-Log -Level INFO -Message "User opened form Add gMSA to a group"
	
	#Of Groups need to be selected
	If (Show-GroupPickerForm_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			#Add gMSA to a group
			Add-GMSAGroupsToDGV -gMSA $SelectedGMSA -Group $SelectedADObject
			
			#Update info in GUI
			Show-GMSAInfo
			
			#Remove temp data
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

$button_GMSA_RemoveMemberOf_Click = {
	
	# REMOVE GMSA FROM SELECTED GROUP
	
	Write-Log -Level INFO -Message "User opened form Remove gMSA from a group"
	
	#Remove gMSA from group
	Remove-GMSAfromGroup -gMSA $($textbox_GMSA_SamAccountName.Text) -Group $($dgv_GMSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	
	# LOAD A LIST OF THE MAMAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Show-GMSAInfo
	
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

$button_GMSA_SaveDGVtoCSV_Click = {
	
	# SAVE GMSA SERVICE ACCOUNTS FOUND TO .CSV
	Write-Log -Level INFO -Message "User pressed on Save GMSA data to a .csv file"
		
	# Get export filename to save file dialog
	# Get the current timestamp
	$timestamp = Get-Date -Format "dd-MM-yyyy-HHmmss"
	
	# Construct the CSV filename with the Domain Name and Timestamp
	$savefiledialog_GMSA_DGV.FileName = "GMSA_Export_$($toolstripstatuslabelMain_ActiveDirectoryStatusDomainText.Text)_$timestamp.csv"	
	$savefiledialog_GMSA_DGV.InitialDirectory = "C:\"
	$savefiledialog_GMSA_DGV.ValidateNames = $true
	
	# Try to save
	if ($savefiledialog_GMSA_DGV.ShowDialog() -eq 'Ok')
	{
		try
		{
			$dgv_GMSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
			
			#Export data to .csv
			$dgv_GMSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_GMSA_DGV.FileName -Delimiter ";" -NoTypeInformation
			
			Write-Log -Level INFO -Message "User saved information about gMSA to a .csv file"
		}
		catch [System.Exception]
		{
			#If error, log if
			Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
		}
	}
}

$contextmenustrip_GMSA_Remove_Click = {
	
	Write-Log -Level INFO -Message "User pressed on button Remove gMSA"
	Remove-GMSA -Confirm:$false
	
	# LOAD A LIST OF THE MAMAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-GMSAToDGV
	
	#Update info in GUI
	Show-GMSAInfo
	
	Write-Log -Level INFO -Message "Reloaded gMSA list to get updated information about gMSA's"
}

#endregion Group Managed Service Account Tab

#region Standard Service Account Tab

$textbox_SSA_AccountSelectOU_TextChanged = {
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-SSAToDGV
}

$button_SSA_AccountSelectOU_Click = {
	
	# OPEN THE OU PICKER TO SELECT A HOME FOR THE NEW ACCOUNT	
	Write-Log -Level INFO -Message "User opened form OU Picker for a home of the SSA accounts"
	$NewOU = $(Invoke-OUPicker_ps1 -HideNewOUFeature).DistinguishedName
	If ($NewOU)
	{
		$textbox_SSA_AccountSelectOU.Text = $NewOU
		Write-Log -Level INFO -Message "User has selected another OU for the home of the SSA accounts (NOT APPLYED until that task in done!)"
		Remove-Variable -Name NewOU -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	}
}

$button_SSA_Refresh_Click = {
	
	Write-Log -Level INFO -Message "User pressed button for refresh SSA information"
	
	$combobox_SSA_FilterBy.Text = "Name"
	$textbox_SSA_Filter.Text = ""
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-SSAToDGV
	
	#Update info in GUI
	Show-SSAInfo
	
	Write-Log -Level INFO -Message "Reloaded SSA list to get updated information about SSA's"
}

$button_SSA_CreateNew_Click = {
	
	Write-Log -Level INFO -Message "User opened form Create a SSA"
	Show-NewServiceAccountForm -StandardServiceAccount
}

$dgv_SSA_Select_Click = {
	
	Show-SSAInfo
}

$dgv_SSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
}

$textbox_SSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_SSA_Select -DataGridViewFilterBy $combobox_SSA_FilterBy.Text -DataGridviewFilter $textbox_SSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
}

$textbox_SSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Description.Text -ne $textbox_SSA_Description.Tag)
	{
		$textbox_SSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Description.ForeColor = 'Black'
	}
}

$textbox_SSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$combobox_SSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_SSA_FunctionalOwner.Text -ne $combobox_SSA_FunctionalOwner.Tag)
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Black'
	}
}

$combobox_SSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$textbox_SSA_Password_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Password.Text -ne "")
	{
		$textbox_SSA_Password.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Password.ForeColor = 'Black'
	}
}

$textbox_SSA_Password_ForeColorChanged = {
	
	# PASSWORD FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$button_SSA_Password_Click = {
	
	Write-Log -Level INFO -Message "User pressed on button for creating a new 40 characters password for SSA (NOT APPLYED until that task is done!)"
	
	# CREATE A RANDOM COMPLEX PASSWORD WITH 40 CHARACTERS
	$textbox_SSA_Password.Text = GenerateStrongPassword -PasswordLength 40
}

$checkbox_SSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_DES.Checked -ne $checkbox_SSA_DES.Tag)
	{
		$checkbox_SSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_DES.ForeColor = 'Black'
	}
}

$checkbox_SSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$checkbox_SSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_RC4.Checked -ne $checkbox_SSA_RC4.Tag)
	{
		$checkbox_SSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_RC4.ForeColor = 'Black'
	}
}

$checkbox_SSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$checkbox_SSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES128.Checked -ne $checkbox_SSA_AES128.Tag)
	{
		$checkbox_SSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES128.ForeColor = 'Black'
	}
}

$checkbox_SSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$checkbox_SSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES256.Checked -ne $checkbox_SSA_AES256.Tag)
	{
		$checkbox_SSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES256.ForeColor = 'Black'
	}
}

$checkbox_SSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
}

$radiobutton_SSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_SSA_EnabledNo.Checked -ne $radiobutton_SSA_EnabledNo.Tag)
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_SSA_EnabledNo_ForeColorChanged = {
	
	Test-SSAPropertyChange
}

$button_SSA_Apply_Click = {
	
	Write-Log -Level INFO -Message "User pressed on button for apply changes to SSA [$SelectedSSA]"
	
	If (($checkbox_SSA_DES.Checked -eq $false) -and ($checkbox_SSA_RC4.Checked -eq $false) -and ($checkbox_SSA_AES128.Checked -eq $false) -and ($checkbox_SSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected. Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		# ASK IF THE USER WAIL APPLY THE CHANGE - LAST CHANCE
		$ConfirmChangeForSSA = Show-MsgBox -Prompt "Sure you want to change the settings?`r`n`r`nChanges will apply for SSA [$SelectedSSA]." -Title "Changes will apply for SSA $SelectedSSA - sure?" -Icon Question -BoxType YesNo -DefaultButton 1
		If ($ConfirmChangeForSSA -eq "Yes")
		{
			Try
			{
				# MODIFY THE SSA PROPERTIES
				Modify-SSA -SSA $SelectedSSA
				
				#Show-MsgBox -Prompt "Successfully set changes to SSA [$SelectedSSA]" -Title "Success" -Icon Information -BoxType OKOnly -DefaultButton '1'
				#Write-Log -Level INFO -Message "User has pressed Apply for SSA [$SelectedSSA] - confirmed by user"
			}
			Catch
			{
				Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
				Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
			}
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled for SSA [$SelectedSSA]" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			Write-Log -Level INFO -Message "Operation canceled for SSA [$SelectedSSA] - canceled by user, Aborting Change for Apply changes to SSA [$SelectedSSA]"
			return
		}
		
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-SSAToDGV
		
		Write-Log -Level INFO -Message "Reloaded SSA list to get updated information about SSA's"
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_SSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedSSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
		
		#Update info in GUI
		Show-SSAInfo
	}
}

$button_SSA_AddMemberOf_Click = {
	
	Write-Log -Level INFO -Message "User opened form Add Member of group for SSA [$SelectedSSA]"
	
	# OPEN GROUP PICKER, AND ADD THE SSA TO THE GROUP SELECTED
	If (Show-GroupPickerForm_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			#Add to group
			Add-SSAGroupsToDGV -SSA $SelectedSSA -Group $SelectedADObject
			
			#Update info in GUI
			Show-SSAInfo
			
			#Clear temp data
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	Write-Log -Level INFO -Message "Reloaded SSA list to get updated information about SSA's"
}

$button_SSA_RemoveMemberOf_Click = {
	
	Write-Log -Level INFO -Message "User opened form Remove member of group for SSA [$textbox_SSA_SamAccountName]"
	
	# REMOVE SSA FROM SELECTED GROUP
	Remove-SSAfromGroup -SSA $($textbox_SSA_SamAccountName.Text) -Group $($dgv_SSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	
	#Update info in GUI
	Show-SSAInfo
	
	Write-Log -Level INFO -Message "Reloaded SSA list to get updated information about SSA's"
}

$button_SSA_SaveDGVtoCSV_Click = {
	
	# Get export filename to save file dialog
	# Get the current timestamp
	$timestamp = Get-Date -Format "dd-MM-yyyy-HHmmss"
	
	# Construct the CSV filename with the Domain Name and Timestamp
	$savefiledialog_SSA_DGV.FileName = "SSA_Export_$($toolstripstatuslabelMain_ActiveDirectoryStatusDomainText.Text)_$timestamp.csv"
	$savefiledialog_SSA_DGV.InitialDirectory = "C:\"
	$savefiledialog_SSA_DGV.ValidateNames = $true
	
	if ($savefiledialog_SSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_SSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_SSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_SSA_DGV.FileName -Delimiter ";" -NoTypeInformation
		
		Write-Log -Level INFO -Message "User saved SSA data to .csv file"
	}
}

$contextmenustrip_SSA_Remove_Click = {
	
	Write-Log -Level INFO -Message "User has opened Remove SSA"
	#Remove the SSA
	Remove-SSA -Confirm:$false
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-SSAToDGV
	
	#Update info in GUI
	Show-SSAInfo
	
	Write-Log -Level INFO -Message "Reloaded SSA list to get updated information about SSA's"
}

$contextmenustrip_SSA_CreateGMSA_Click = {
	
	Write-Log -Level INFO -Message "User opened form Create GMSA from SSA"
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
}

#endregion Standard Service Account Tab

#region Domain Information Tab
$button_Information_Loaddata_Click = {
	
	# SHOW DOMAIN INFORMATION
	Show-DomainInfo
}

#endregion

#region Form actions

$tabcontrol_ServiceAccounts_SelectedIndexChanged = {
	
	if ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_GMSA)
	{
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		Write-Log -Level INFO -Message "User changed tab - Loading list of Group Managed Service Accounts that currenty exists..."
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
		
		Write-Log -Level INFO -Message "User changed tab - Loading list of Group Managed Service Accounts that currenty exists... Done"
	}
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Standard)
	{
		Write-Log -Level INFO -Message "User changed tab - Loading list of Standard Service Accounts that currenty exists..."
		
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		
		If (Test-DomainConnection)
		{
			If (Find-ServiceAccountOU -ne $null)
			{
				$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
			}
			Else
			{
				if ($textbox_SSA_AccountSelectOU.Text.Length -eq 0)
				{
					Show-MsgBox -Prompt "Can't locate the service account OU automaticly be name a standard aka: Privileged Account*, Service* or *Service*Account*`r`n`r`nPlease select your OU for Service Accounts to continue." -Title "Can't locate the service account OU automaticly" -Icon Exclamation -BoxType OKOnly
					Write-Log -Level INFO -Message "Can't locate the service account OU automaticly be name a standard aka: Privileged Account*, Service* or *Service*Account*"
				}
				if ($textbox_SSA_AccountSelectOU.Text.Length -ne 0)
				{
					$OUName = $textbox_SSA_AccountSelectOU.Text
					Write-Log -Level INFO -Message "Loading list of Standard Service Accounts that currenty exists in: $OUName"
				}
			}
		}
		
		#$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		Get-SSAToDGV		
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		Show-SSAInfo
		
		Write-Log -Level INFO -Message "User changed tab - Loading list of Standard Service Accounts that currenty exists... Done"
	}
	
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Information)
	{
		# LOAD DOMAIN INFORMATION
		Write-Log -Level INFO -Message "User changed tab - Show information about Active Directory"
		#Write-Log -Level INFO -Message "User changed tab - Loading information about Active Directory..."
		
		# SHOW DOMAIN INFORMATION
		#Show-DomainInfo
	}	
}

#endregion

#region Top buttons/menu

$downloadLatestReleaseFromGitHubToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
	
}

$pictureboxSupportMe_Click = {
	
	# Start webpage
	Start-Process $global:BuyMeACoffieURL
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BuyMeACoffieURL"
	
}

$aboutToolStripMenuItem_Click = {
	
	# Open form
	Show-AboutForm_psf
	
}

$openLogsToolStripMenuItem_Click = {
	
	#OPEN LOG FOLDER
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	Write-Log -Level INFO -Message "User opened log folder: $LogPath"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: $LogPath"

	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)" + "_Log_" + $($env:computername) + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	if (Test-Path $logFilePath)
	{
		Start-Process $logFilePath
		Write-Log -Level INFO -Message "User opened log file for today: $logFilePath"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at $logFilePath." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		Write-Log -Level INFO -Message "Log file not found at $logFilePath - Can't locate and open the log for today"
	}
}

$myWebpageToolStripMenuItem_Click = {
	
	#OPEN WEBSITE
	Start-Process $global:WebsideURL
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:WebsideURL"
}

$myBlogToolStripMenuItem_Click = {
	
	#OPEN WEBSITE
	Start-Process $global:BlogURL
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website $global:BlogURL"
}

$changelogToolStripMenuItem_Click = {
	
	#OPEN CHANGE LOG FORM
	Write-Log -Level INFO -Message "User opened form Changelog"
	Show-ChangelogForm_psf
}

$button_ServiceAccounts_About_Click = {
	
	#SHOW ABOUT
	#Show-MsgBox -Title "About Service Accounts v. $FormVersion" -Prompt "Created by:`r`n`r`n$Author`r`nEmail: $AuthorEmail`r`nCompany: $AuthorCompany" -Icon Information -BoxType OKOnly
	#Show-MsgBox -Title "About Service Accounts v. $FormVersion" -Prompt "Created by: $Author`r`nEmail: $AuthorEmail`r`nCompany: $AuthorCompany`r`n`r`nCopyright © All rights reserved" -Icon Information -BoxType OKOnly
	#Show-MsgBox -Title "About Service Accounts v. $FormVersion" -Prompt "Created by: $Author`r`nCompany: $AuthorCompany`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
	
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $global:ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$linklabelReadMoreHereAboutGMS_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	
	Start-Process "https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-accounts/group-managed-service-accounts-overview"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about Group Managed Service Accounts on docs.microsoft.com"
}

$ExportstaledataToolStripMenuItem_Click = {
	
	# Export stale objects
	Export-StateUserObjectsInfo
	Export-StateComputerObjectsInfo
}

$ExportoveralldataToolStripMenuItem_Click = {
	
	# EXPORT DOMAIN INFORMATION
	Export-DomainInfo
}

$guideToolStripMenuItem_Click = {
	
	#OPEN WEBSITE
	Start-Process $global:GitHubRepoURL
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the guide at $global:GitHubRepoURL"
	
}

#endregion

#region Statusstrip buttons

$toolstripstatuslabelMain_ADRecycleBinStatusText_Click = {
	
	#If the status for AD Recycle Bin is Disabled (infor from function))
	if ($toolstripstatuslabelMain_ADRecycleBinStatusText.Text -eq "Disabled")
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmInstallADRecycleBin = Show-MsgBox -Prompt "Will you install the Active Directory Recycle Bin for the domain ($env:USERDNSDOMAIN)?`r`n`r`nThis will use the current user (make sure you have the right permissions before) and can´t be uninstalled again!" -Title "Install Active Directory Recycle Bin?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# IF YES
		If ($ConfirmInstallADRecycleBin -eq "Yes")
		{
			$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = "Installing..."
			$toolstripstatuslabelMain_ADRecycleBinStatusText.ForeColor = 'Yellow'
			Try
			{
				# INSTALL FEATURE
				Write-Log -Level INFO -Message "User pressed on button to Install Active Directory Recycle Bin for domain $env:USERDNSDOMAIN - confirmed by user"
				
				Import-Module ActiveDirectory
				
				#Find the correct server in Active Directory to install the feature on (DomainNamingMaster)
				$ServerDomainNamingMaster = (Get-ADDomainController -Filter { OperationMasterRoles -like 'DomainNamingMaster' } | Select-Object -ExpandProperty name)
				Enable-ADOptionalFeature -Identity 'Recycle Bin Feature' -Scope ForestOrConfigurationSet -Target $env:USERDNSDOMAIN -Server $ServerDomainNamingMaster -Confirm:$false
				
				# Test if Active Directory Recycle Bin is enabled or not
				If (Test-ADRecycleBin)
				{
					# If Active Directory Recycle Bin is enabled show in statusbar
					$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = "Enabled"
					$toolstripstatuslabelMain_ADRecycleBinStatusText.ForeColor = 'Green'
					
					Write-Log -Level INFO -Message "Active Directory Recycle Bin Status: Enabled"
					Write-Log -Level INFO -Message "Successfully installed Active Directory Recycle Bin for domain $env:USERDNSDOMAIN via Domain Naming Master: $ServerDomainNamingMaster"
					
					#Show info to the user
					Show-MsgBox -Prompt "Successfully installed Active Directory Recycle Bin for domain $env:USERDNSDOMAIN via Domain Naming Master: $ServerDomainNamingMaster" -Title "Success" -Icon Information -BoxType OKOnly -DefaultButton '1'
				}
			}
			Catch
			{
				#If installation is not done correct
				$toolstripstatuslabelMain_ADRecycleBinStatusText.Text = "Error installing..."
				$toolstripstatuslabelMain_ADRecycleBinStatusText.ForeColor = 'Red'
				
				#Show the error to user
				Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
				Write-Log -Level ERROR -Message $($Error[0].Exception.Message)
			}
		}
		# IF NO
		else
		{
			#Show the information to the user and log
			Show-MsgBox -Prompt "Installation for Active Directory Recycle Bin for domain $env:USERDNSDOMAIN canceled by user, aborting" -Title "Aborting install of Active Directory Recycle Bin" -Icon Information -BoxType OKOnly
			Write-Log -Level INFO -Message "Installation for Active Directory Recycle Bin for domain $env:USERDNSDOMAIN canceled by user, aborting"
		}
	}
}

$toolstripstatuslabelMain_ForestlevelStatusText_Click = {
	
	Start-Process "https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/active-directory-functional-levels"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about functions levels on the website https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/active-directory-functional-levels"
	
}

#endregion
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>